package org.example.lib;

import org.example.lib.exceptions.ObjectAlreadyExistException;
import org.example.lib.utils.Utils;

import javax.sql.DataSource;
import java.io.Serializable;
import java.util.List;
import java.util.Optional;
import java.util.stream.Stream;

// 1st part
public interface ORManager {
    // let it work with ids:
    // - Long (autogenerated at DB side)  (HIGH)
    // - UUID (autogenerated at ORM side) (MEDIUM)
    // - String                           (OPTIONAL)
    // The fields may be of types:
    // - int/Integer                      (HIGH)
    // - long/Long                        (HIGH)
    // - double/Double                    (OPTIONAL)
    // - boolean/Boolean                  (OPTIONAL)
    // - String                           (HIGH)
    // - LocalDate                        (MEDIUM)
    // - LocalTime                        (MEDIUM)
    // - LocalDateTime/Instant            (MEDIUM)
    // - BigDecimal                       (OPTIONAL)
    // - Enum +                           (OPTIONAL)
    //   @Enumerated(Enumerated.EnumType.ORDINAL/Enumerated.EnumType.STRING)

    // initialize connection factory for the DB
    // read the jdbc url, username and password from
    //  the given property file
    static ORManager withPropertiesFrom(String filename) {
        return Utils.getORMImplementation(filename);
    }

    // initialize connection factory for the DB based on the DataSource
    static ORManager withDataSource(DataSource dataSource) {
        return Utils.getORMImplementation(dataSource);
    }

    boolean checkConnectionToDB();

    // generate the schema in the DB
    // for given list of entity classes (and all related
    //  by OneToMany/ManyToOne) create a schema in DB
    void register(Class... entityClasses);

    // CREATE
    // save a new object to DB, set id if autogenerated
    // or merge into DB if id is present
    <T> T save(T o);

    // save a new object to DB, set id if autogenerated
    // throw if the object has id already set (except for String)
    void persist(Object o) throws ObjectAlreadyExistException;

    // READ
    <T> Optional<T> findById(Serializable id, Class<T> cls);

    // READ ALL
    <T> List<T> findAll(Class<T> cls);

    // READ ALL LAZY
    <T> Iterable<T> findAllAsIterable(Class<T> cls); // (MEDIUM)

    <T> Stream<T> findAllAsStream(Class<T> cls);     // (OPTIONAL)

    // UPDATE
    <T> T merge(T o);   // send o -> DB row (to table)

    <T> T refresh(T o); // send o <- DB row (from table)

    // DELETE
    // set autogenerated id to null
    // return true if successfully deleted
    boolean delete(Object o);
}

